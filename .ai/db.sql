-- Header comment:
-- Purpose: Initializes the database schema for the Meeting Summarizer application.
--          This migration creates the 'users' and 'meeting_summaries' tables,
--          sets up relationships between them, adds indexes for performance,
--          and configures Row Level Security (RLS) for data protection.
--
-- Affected tables/columns:
--          - users (id, email, created_at)
--          - meeting_summaries (id, user_id, file_name, data_utworzenia, data_modyfikacji,
--                                transcription, summary, llm_generated, notes)
--
-- Special considerations:
--          - The 'id' column in the 'users' table is assumed to be managed by Supabase Auth.
--          - RLS policies are configured to ensure that users can only access their own data.

-- Create the 'users' table
create table users (
    id uuid primary key,
    email varchar(255) unique not null,
    created_at timestamp with time zone default now()
);

comment on table users is 'table containing user information';
comment on column users.id is 'user id from supabase auth';
comment on column users.email is 'user email address';
comment on column users.created_at is 'timestamp of user creation';

-- Enable RLS on the 'users' table
alter table users enable row level security;

-- Create RLS policy for 'users' table - SELECT access for authenticated users
create policy "users_select_policy" on users for select to authenticated
using (auth.uid() = id);
comment on policy "users_select_policy" on users is 'enable read access to all users based on user id';

-- Create the 'meeting_summaries' table
create table meeting_summaries (
    id uuid primary key default gen_random_uuid(),
    user_id uuid references users(id) on delete cascade not null,
    file_name varchar(255),
    data_utworzenia timestamp with time zone default now() not null,
    data_modyfikacji timestamp with time zone default now() not null,
    transcription text not null,
    summary varchar(500) not null,
    llm_generated boolean default true not null,
    notes text not null
);

comment on table meeting_summaries is 'table containing meeting summaries';
comment on column meeting_summaries.id is 'unique id for meeting summary';
comment on column meeting_summaries.user_id is 'user id, foreign key from users table';
comment on column meeting_summaries.file_name is 'name of the original transcription file';
comment on column meeting_summaries.data_utworzenia is 'timestamp of summary creation';
comment on column meeting_summaries.data_modyfikacji is 'timestamp of last summary modification';
comment on column meeting_summaries.transcription is 'original meeting transcript';
comment on column meeting_summaries.summary is 'llm generated meeting summary';
comment on column meeting_summaries.llm_generated is 'boolean indicating whether the summary was generated by llm';
comment on column meeting_summaries.notes is 'user notes for the given summary';

-- Enable RLS on the 'meeting_summaries' table
alter table meeting_summaries enable row level security;

-- Create RLS policy for 'meeting_summaries' table - SELECT access for authenticated users
create policy "meeting_summaries_select_policy" on meeting_summaries for select to authenticated
using (auth.uid() = user_id);
comment on policy "meeting_summaries_select_policy" on meeting_summaries is 'enable read access to all users based on user id';

-- Create RLS policy for 'meeting_summaries' table - INSERT access for authenticated users
create policy "meeting_summaries_insert_policy" on meeting_summaries for insert to authenticated
with check (auth.uid() = user_id);
comment on policy "meeting_summaries_insert_policy" on meeting_summaries is 'enable insert access to all users based on user id';

-- Create RLS policy for 'meeting_summaries' table - UPDATE access for authenticated users
create policy "meeting_summaries_update_policy" on meeting_summaries for update to authenticated
using (auth.uid() = user_id)
with check (auth.uid() = user_id);
comment on policy "meeting_summaries_update_policy" on meeting_summaries is 'enable update access to all users based on user id';

-- Create RLS policy for 'meeting_summaries' table - DELETE access for authenticated users
create policy "meeting_summaries_delete_policy" on meeting_summaries for delete to authenticated
using (auth.uid() = user_id);
comment on policy "meeting_summaries_delete_policy" on meeting_summaries is 'enable delete access to all users based on user id';

-- Create indexes to optimize query performance
create index idx_meeting_summaries_user_id on meeting_summaries(user_id);
comment on index idx_meeting_summaries_user_id is 'index for user id, used for fast data retrieval';

create index idx_meeting_summaries_data_utworzenia on meeting_summaries(data_utworzenia);
comment on index idx_meeting_summaries_data_utworzenia is 'index for meeting summary creation date, used for fast data retrieval';

create index idx_meeting_summaries_llm_generated on meeting_summaries(llm_generated);
comment on index idx_meeting_summaries_llm_generated is 'index for llm generation flag, used for fast data retrieval';